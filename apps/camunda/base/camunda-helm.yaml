---
# Source: camunda-platform/charts/elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-12.3.0
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: true
---
# Source: camunda-platform/charts/identity/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: identity
---
# Source: camunda-platform/charts/operate/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: operate
---
# Source: camunda-platform/charts/optimize/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.2.13
    app.kubernetes.io/version: "3.10.5"
    app.kubernetes.io/component: optimize
---
# Source: camunda-platform/charts/tasklist/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: tasklist
---
# Source: camunda-platform/charts/zeebe-gateway/templates/gateway-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-zeebe-gateway-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-gateway
---
# Source: camunda-platform/charts/zeebe/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-platform-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-broker

---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-platform-keycloak-env-vars
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-12.3.0
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "passthrough"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "camunda-platform-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "bitnami_keycloak"
  KEYCLOAK_DATABASE_USER: "bn_keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=camunda-platform-keycloak-headless.camunda.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KC_LOG_LEVEL: "INFO"
---
# Source: camunda-platform/charts/operate/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-platform-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: operate
apiVersion: v1
data:
  application.yml: |
    # Operate configuration file
    camunda.operate:
      # ELS instance to store Operate data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "camunda-platform-zeebe-gateway:26500"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
    logging:
      level:
        ROOT: INFO
        io.camunda.operate: DEBUG
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
---
# Source: camunda-platform/charts/tasklist/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-platform-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: tasklist
apiVersion: v1
data:
  application.yml: |
    # Tasklist configuration file

    camunda.tasklist:
      # Set Tasklist username and password.
      # If user with <username> does not exists it will be created.
      # Default: demo/demo
      #username:
      #password:
      # ELS instance to store Tasklist data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "camunda-platform-zeebe-gateway:26500"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus,loggers,usage-metrics,backups
    # Enable or disable metrics
    #management.metrics.export.prometheus.enabled: false
---
# Source: camunda-platform/charts/zeebe-gateway/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-platform-zeebe-gateway-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-gateway
apiVersion: v1
data:
  gateway-log4j2.xml: |
---
# Source: camunda-platform/charts/zeebe/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-platform-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-broker
apiVersion: v1
data:
  startup.sh: |
    #!/usr/bin/env bash
    set -eux -o pipefail

    export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-${K8S_NAME##*-}}

    if [ "$(ls -A /exporters/)" ]; then
      mkdir /usr/local/zeebe/exporters/
      cp -a /exporters/*.jar /usr/local/zeebe/exporters/
    else
      echo "No exporters available."
    fi

    exec /usr/local/zeebe/bin/broker

  broker-log4j2.xml: |
---
# Source: camunda-platform/templates/release-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-platform-release
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.2.13
    app.kubernetes.io/version: "8.2.13"
  annotations:
    {}
data:
  
  info: |
    - name: camunda-platform
      namespace: camunda
      version: 8.2.13
      components:
      - name: Keycloak
        url: http:///auth
      - name: Identity
        url: http://
        readiness: http://camunda-platform-identity.camunda:80/actuator/health
      - name: Operate
        url: http://
        readiness: http://camunda-platform-operate.camunda:80/actuator/health/readiness
      - name: Optimize
        url: http://
        readiness: http://camunda-platform-optimize.camunda:80/api/readyz
      - name: Tasklist
        url: http://
        readiness: http://camunda-platform-tasklist.camunda:80/actuator/health/readiness
      - name: Zeebe Gateway
        url: grpc://
        readiness: http://camunda-platform-zeebe-gateway.camunda:9600/actuator/health
---
# Source: camunda-platform/charts/elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "camunda-platform"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "camunda-platform"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: camunda-platform/charts/elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "camunda-platform"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-postgresql-hl
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/component: primary
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-keycloak-headless
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-12.3.0
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/component: keycloak
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-12.3.0
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/component: keycloak
---
# Source: camunda-platform/charts/identity/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: identity
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 80
    name: http
    targetPort: 8080
    protocol: TCP
  - port: 82
    name: metrics
    targetPort: 8082
    protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: identity
---
# Source: camunda-platform/charts/operate/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: operate
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 80
    name: http
    targetPort: 8080
    protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: operate
---
# Source: camunda-platform/charts/optimize/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.2.13
    app.kubernetes.io/version: "3.10.5"
    app.kubernetes.io/component: optimize
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 80
    name: http
    targetPort: 8090
    protocol: TCP
  - port: 8092
    name: management
    targetPort: 8092
    protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: optimize
---
# Source: camunda-platform/charts/tasklist/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: tasklist
spec:
  type: ClusterIP
  ports:
  - port: 80
    name: http
    targetPort: 8080
    protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: tasklist
---
# Source: camunda-platform/charts/zeebe-gateway/templates/gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "camunda-platform-zeebe-gateway"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
spec:
  type: ClusterIP
  selector:
      app: camunda-platform
      app.kubernetes.io/name: zeebe-gateway
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26500
      protocol: TCP
      name: gateway
---
# Source: camunda-platform/charts/zeebe/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "camunda-platform-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-broker
  annotations:
    {}
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26502
      protocol: TCP
      name: internal
    - port: 26501
      protocol: TCP
      name: command
  selector:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-broker
---
# Source: camunda-platform/templates/connectors/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-platform-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: connectors
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: connectors
---
# Source: camunda-platform/charts/identity/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-platform-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: identity
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: identity
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: identity
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: identity
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: identity-8.2.13
        app.kubernetes.io/version: "8.2.13"
        app.kubernetes.io/component: identity
    spec:
      imagePullSecrets:
        []
      containers:
      - name: identity
        image: "camunda/identity:8.2.13"
        imagePullPolicy: IfNotPresent
        env:
          - name: KEYCLOAK_INIT_OPERATE_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-operate-identity-secret"
                key: operate-secret
          - name: KEYCLOAK_INIT_OPERATE_ROOT_URL
            value: "http://localhost:8081"
          - name: KEYCLOAK_INIT_TASKLIST_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-tasklist-identity-secret"
                key: tasklist-secret
          - name: KEYCLOAK_INIT_TASKLIST_ROOT_URL
            value: "http://localhost:8082"
          - name: KEYCLOAK_INIT_OPTIMIZE_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-optimize-identity-secret"
                key: optimize-secret
          - name: KEYCLOAK_INIT_OPTIMIZE_ROOT_URL
            value: "http://localhost:8083"
          - name: KEYCLOAK_INIT_WEBMODELER_ROOT_URL
            value: "http://localhost:8084"
          - name: KEYCLOAK_INIT_ZEEBE_NAME
            value: "Zeebe"
          # TODO: Use ".Values.connectors.inbound.mode=oauth" as a condition when we migrate
          # to flat chart structure. Also then remove the optional flag from the secret.
          - name: KEYCLOAK_CLIENTS_0_NAME
            value: Connectors
          - name: KEYCLOAK_CLIENTS_0_ID
            value: connectors
          - name: KEYCLOAK_CLIENTS_0_SECRET
            valueFrom:
              secretKeyRef:
                key: connectors-secret
                name: "camunda-platform-connectors-identity-secret"
          - name: KEYCLOAK_CLIENTS_0_ROOT_URL
            value: http://placeholder
          - name: KEYCLOAK_CLIENTS_0_REDIRECT_URIS_0
            value: /
          - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_RESOURCE_SERVER_ID
            value: operate-api
          - name: KEYCLOAK_CLIENTS_0_PERMISSIONS_0_DEFINITION
            value: "read:*"
          - name: KEYCLOAK_CLIENTS_1_NAME
            value: "Zeebe"
          - name: KEYCLOAK_CLIENTS_1_ID
            value: "zeebe"
          - name: KEYCLOAK_CLIENTS_1_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-zeebe-identity-secret"
                key: zeebe-secret
          - name: KEYCLOAK_CLIENTS_1_TYPE
            value: "M2M"
          - name:  KEYCLOAK_CLIENTS_1_PERMISSIONS_0_RESOURCE_SERVER_ID
            value: "zeebe-api"
          - name:  KEYCLOAK_CLIENTS_1_PERMISSIONS_0_DEFINITION
            value: "write:*"
          - name: SERVER_PORT
            value: "8080"
          - name: KEYCLOAK_URL
            value: "http://camunda-platform-keycloak:80/auth"
          - name: IDENTITY_AUTH_PROVIDER_ISSUER_URL
            value: "http://localhost:18080/auth/realms/camunda-platform"
          - name: IDENTITY_AUTH_PROVIDER_BACKEND_URL
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
          - name: KEYCLOAK_SETUP_USER
            value: "admin"
          - name: KEYCLOAK_SETUP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: camunda-platform-keycloak
                key: admin-password
          - name: KEYCLOAK_USERS_0_USERNAME
            value: "demo"
          - name: KEYCLOAK_USERS_0_PASSWORD
            value: "demo"
          - name: KEYCLOAK_USERS_0_EMAIL
            value: "demo@example.org"
          - name: KEYCLOAK_USERS_0_FIRST_NAME
            value: "Demo"
          - name: KEYCLOAK_USERS_0_LAST_NAME
            value: "User"
          - name: KEYCLOAK_USERS_0_ROLES_0
            value: "Identity"
          - name: KEYCLOAK_USERS_0_ROLES_1
            value: "Operate"
          - name: KEYCLOAK_USERS_0_ROLES_2
            value: "Tasklist"
          - name: KEYCLOAK_USERS_0_ROLES_3
            value: "Optimize"
          - name: KEYCLOAK_USERS_0_ROLES_4
            value: "Web Modeler"
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 600m
            memory: 400Mi
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8082
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            # NOTE: Identity doesn't support contextPath for health endpoints.
            path: /actuator/health
            scheme: HTTP
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 1
---
# Source: camunda-platform/charts/operate/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-platform-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: operate
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: operate
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: operate
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: operate
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: operate-8.2.13
        app.kubernetes.io/version: "8.2.13"
        app.kubernetes.io/component: operate
    spec:
      imagePullSecrets:
        []
      containers:
      - name: operate
        image: "camunda/operate:8.2.13"
        imagePullPolicy: IfNotPresent
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: "identity-auth"
          - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
          - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
          - name: CAMUNDA_OPERATE_IDENTITY_ISSUER_URL
            value: "http://localhost:18080/auth/realms/camunda-platform"
          - name: CAMUNDA_OPERATE_IDENTITY_ISSUER_BACKEND_URL
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
          - name: CAMUNDA_OPERATE_IDENTITY_CLIENT_ID
            value: "operate"
          - name: CAMUNDA_OPERATE_IDENTITY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-operate-identity-secret"
                key: operate-secret
          - name: CAMUNDA_OPERATE_IDENTITY_AUDIENCE
            value: "operate-api"
          - name: CAMUNDA_OPERATE_IDENTITY_REDIRECT_ROOT_URL
            value: "http://localhost:8081"
          - name: ZEEBE_CLIENT_ID
            value: zeebe
          - name: ZEEBE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-zeebe-identity-secret"
                key: zeebe-secret
          - name: ZEEBE_AUTHORIZATION_SERVER_URL
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
          - name: ZEEBE_TOKEN_AUDIENCE
            value: zeebe-api
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 600m
            memory: 400Mi
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            scheme: HTTP
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: config
          mountPath: /usr/local/operate/config/application.yml
          subPath: application.yml
      volumes:
      - name: config
        configMap:
          name: camunda-platform-operate
          defaultMode: 292
---
# Source: camunda-platform/charts/optimize/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-platform-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.2.13
    app.kubernetes.io/version: "3.10.5"
    app.kubernetes.io/component: optimize
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: optimize
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: optimize
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: optimize
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: optimize-8.2.13
        app.kubernetes.io/version: "3.10.5"
        app.kubernetes.io/component: optimize
    spec:
      imagePullSecrets:
        []
      containers:
      - name: optimize
        image: "camunda/optimize:3.10.5"
        imagePullPolicy: IfNotPresent
        env:
          - name: CAMUNDA_OPTIMIZE_ZEEBE_ENABLED
            value: "true"
          - name: CAMUNDA_OPTIMIZE_ZEEBE_PARTITION_COUNT
            value: "3"
          - name: OPTIMIZE_ELASTICSEARCH_HOST
            value: "elasticsearch-master"
          - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
            value: "9200"
          - name: SPRING_PROFILES_ACTIVE
            value: "ccsm"
          - name: CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_URL
            value: "http://localhost:18080/auth/realms/camunda-platform"
          - name: CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_BACKEND_URL
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
          - name: CAMUNDA_OPTIMIZE_IDENTITY_REDIRECT_ROOT_URL
            value: "http://localhost:8083"
          - name: CAMUNDA_OPTIMIZE_IDENTITY_CLIENTID
            value: "optimize"
          - name: CAMUNDA_OPTIMIZE_IDENTITY_CLIENTSECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-optimize-identity-secret"
                key: optimize-secret
          - name: CAMUNDA_OPTIMIZE_IDENTITY_AUDIENCE
            value: "optimize-api"
          - name: CAMUNDA_OPTIMIZE_API_AUDIENCE
            value: "optimize-api"
          - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
          - name: CAMUNDA_OPTIMIZE_SECURITY_AUTH_COOKIE_SAME_SITE_ENABLED
            value: "false"
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 600m
            memory: 1Gi
        ports:
        - containerPort: 8090
          name: http
          protocol: TCP
        - containerPort: 8092
          name: management
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /api/readyz
            scheme: HTTP
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 1
        volumeMounts:
      volumes:
---
# Source: camunda-platform/charts/tasklist/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-platform-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: tasklist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: tasklist
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: tasklist
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: tasklist
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: tasklist-8.2.13
        app.kubernetes.io/version: "8.2.13"
        app.kubernetes.io/component: tasklist
    spec:
      imagePullSecrets:
        []
      containers:
      - name: tasklist
        image: "camunda/tasklist:8.2.13"
        imagePullPolicy: IfNotPresent
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: "identity-auth"
          - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
          - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/certs"
          - name: CAMUNDA_TASKLIST_IDENTITY_ISSUER_URL
            value: "http://localhost:18080/auth/realms/camunda-platform"
          - name: CAMUNDA_TASKLIST_IDENTITY_ISSUER_BACKEND_URL
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
          - name: CAMUNDA_TASKLIST_IDENTITY_CLIENT_ID
            value: "tasklist"
          - name: CAMUNDA_TASKLIST_IDENTITY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-tasklist-identity-secret"
                key: tasklist-secret
          - name: CAMUNDA_TASKLIST_IDENTITY_AUDIENCE
            value: "tasklist-api"
          - name: CAMUNDA_TASKLIST_IDENTITY_REDIRECT_ROOT_URL
            value: "http://localhost:8082"
          - name: ZEEBE_CLIENT_ID
            value: zeebe
          - name: ZEEBE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: "camunda-platform-zeebe-identity-secret"
                key: zeebe-secret
          - name: ZEEBE_AUTHORIZATION_SERVER_URL
            value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
          - name: ZEEBE_TOKEN_AUDIENCE
            value: zeebe-api
          - name: GRAPHQL_PLAYGROUND_ENABLED
            value: "true"
          - name: GRAPHQL_PLAYGROUND_SETTINGS_REQUEST_CREDENTIALS
            value: "include"
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 400m
            memory: 1Gi
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            scheme: HTTP
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: config
          mountPath: /app/resources/application.yml
          subPath: application.yml
      volumes:
      - name: config
        configMap:
          name: camunda-platform-tasklist
          defaultMode: 292
---
# Source: camunda-platform/charts/zeebe-gateway/templates/gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "camunda-platform-zeebe-gateway"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-gateway
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: zeebe-gateway
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: zeebe-gateway
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: zeebe-gateway-8.2.13
        app.kubernetes.io/version: "8.2.13"
        app.kubernetes.io/component: zeebe-gateway
      annotations:
        {}
    spec:
      imagePullSecrets:
        []
      containers:
        - name: zeebe-gateway
          image: "camunda/zeebe:8.2.13"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26500
              name: gateway
            - containerPort: 26502
              name: internal
          env:
            - name: ZEEBE_STANDALONE_GATEWAY
              value: "true"
            - name: ZEEBE_GATEWAY_CLUSTER_CLUSTERNAME
              value: camunda-platform-zeebe
            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ZEEBE_LOG_LEVEL
              value: "info"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+ExitOnOutOfMemoryError"
            - name: ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT
              value: camunda-platform-zeebe:26502
            - name: ZEEBE_GATEWAY_NETWORK_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_NETWORK_PORT
              value: "26500"
            - name: ZEEBE_GATEWAY_CLUSTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ZEEBE_GATEWAY_CLUSTER_PORT
              value: "26502"
            - name: ZEEBE_GATEWAY_MONITORING_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_MONITORING_PORT
              value: "9600"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_TYPE
              value: "keycloak"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_MODE
              value: "identity"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_ISSUERBACKENDURL
              value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform"
            - name: ZEEBE_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_AUDIENCE
              value: "zeebe-api"
          volumeMounts:
          readinessProbe:
            httpGet:
              path: /actuator/health
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 400m
              memory: 450Mi
            requests:
              cpu: 400m
              memory: 450Mi
      volumes:
        - name: config
          configMap:
            name: camunda-platform-zeebe-gateway-gateway
            defaultMode: 292
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-gateway
            topologyKey: kubernetes.io/hostname
---
# Source: camunda-platform/templates/connectors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-platform-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: connectors
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: connectors
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-8.2.13
        app.kubernetes.io/version: "8.2.13"
        app.kubernetes.io/component: connectors
    spec:
      imagePullSecrets:
        []
      containers:
        - name: connectors
          image: camunda/connectors-bundle:0.23.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: SERVER_PORT
              value: "8080"
            - name: CAMUNDA_OPERATE_CLIENT_KEYCLOAK-URL
              value: http://camunda-platform-keycloak:80
            - name: CAMUNDA_OPERATE_CLIENT_CLIENT-ID
              value: connectors
            - name: CAMUNDA_OPERATE_CLIENT_CLIENT-SECRET
              valueFrom:
                secretKeyRef:
                  name: "camunda-platform-connectors-identity-secret"
                  key: connectors-secret
            - name: CAMUNDA_OPERATE_CLIENT_KEYCLOAK-REALM
              value: camunda-platform
            - name: CAMUNDA_OPERATE_CLIENT_URL
              value: "http://camunda-platform-operate:80"
            - name: ZEEBE_CLIENT_BROKER_GATEWAY-ADDRESS
              value: "camunda-platform-zeebe-gateway:26500"
            - name: ZEEBE_CLIENT_SECURITY_PLAINTEXT
              value: "true"
            - name: ZEEBE_CLIENT_ID
              value: zeebe
            - name: ZEEBE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "camunda-platform-zeebe-identity-secret"
                  key: zeebe-secret
            - name: ZEEBE_AUTHORIZATION_SERVER_URL
              value: "http://camunda-platform-keycloak:80/auth/realms/camunda-platform/protocol/openid-connect/token"
            - name: ZEEBE_TOKEN_AUDIENCE
              value: zeebe-api
          command: []
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
---
# Source: camunda-platform/charts/elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "camunda-platform"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
      labels:
        release: "camunda-platform"
        chart: "elasticsearch"
        app: "elasticsearch-master"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 64Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "camunda-platform"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
      enableServiceLinks: true
      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.10"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: cluster.deprecation_indexing.enabled
            value: "false"
          - name: ES_JAVA_OPTS
            value: "-Xmx1g -Xms1g"
          - name: node.data
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.master
            value: "true"
          - name: node.ml
            value: "true"
          - name: node.remote_cluster_client
            value: "true"
          - name: xpack.security.enabled
            value: "false"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
---
# Source: camunda-platform/charts/identity/charts/keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-platform-postgresql
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: camunda-platform-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: camunda-platform-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.2
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: camunda-platform
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: null
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_keycloak"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-platform-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-platform-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "bitnami_keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: camunda-platform/charts/identity/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-platform-keycloak
  namespace: "camunda"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-12.3.0
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: camunda-platform-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 4225035f926a2c2d6a41db4dbdd4d4e74ecb47be13d2529145522f6b5613f266
        checksum/secrets: 8494b39b6895ec9b725c82bdd6f62095bd917a6d66c05c724be91663a4d16eff
      labels:
        app.kubernetes.io/name: keycloak
        helm.sh/chart: keycloak-12.3.0
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: camunda-platform-keycloak
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: camunda-platform
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: null
      initContainers:
        - command:
          - sh
          - -c
          - cp -a /app/keycloak-theme/* /mnt
          image: 'camunda/identity:8.2.13'
          imagePullPolicy: 'IfNotPresent'
          name: copy-camunda-theme
          volumeMounts:
          - mountPath: /mnt
            name: camunda-theme
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:19.0.3
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-platform-keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: camunda-platform-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/auth/"
            - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
              value: 'false'
          envFrom:
            - configMapRef:
                name: camunda-platform-keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /auth/
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /auth/realms/master
              port: http
          volumeMounts:
            - mountPath: /opt/bitnami/keycloak/themes/identity
              name: camunda-theme
      volumes:
        - emptyDir:
            sizeLimit: 10Mi
          name: camunda-theme
---
# Source: camunda-platform/charts/zeebe/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "camunda-platform-zeebe"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-broker
  annotations:
spec:
  replicas: 3
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: zeebe
      app.kubernetes.io/instance: camunda-platform
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-broker
  serviceName: "camunda-platform-zeebe"
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: zeebe
        app.kubernetes.io/instance: camunda-platform
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: zeebe-8.2.13
        app.kubernetes.io/version: "8.2.13"
        app.kubernetes.io/component: zeebe-broker
      annotations:
    spec:
      imagePullSecrets:
        []
      initContainers:
      containers:
      - name: zeebe
        image: "camunda/zeebe:8.2.13"
        imagePullPolicy: IfNotPresent
        env:
        - name: LC_ALL
          value: C.UTF-8
        - name: K8S_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_SERVICE_NAME
          value: "camunda-platform-zeebe"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ZEEBE_BROKER_NETWORK_ADVERTISEDHOST
          value: "$(K8S_NAME).$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc"
        - name: ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS
          value:
            $(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
            $(K8S_SERVICE_NAME)-1.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
            $(K8S_SERVICE_NAME)-2.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
        - name: ZEEBE_BROKER_CLUSTER_CLUSTERNAME
          value: camunda-platform-zeebe
        - name: ZEEBE_LOG_LEVEL
          value: "info"
        - name: ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT
          value: "3"
        - name: ZEEBE_BROKER_CLUSTER_CLUSTERSIZE
          value: "3"
        - name: ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR
          value: "3"
        - name: ZEEBE_BROKER_THREADS_CPUTHREADCOUNT
          value: "3"
        - name: ZEEBE_BROKER_THREADS_IOTHREADCOUNT
          value: "3"
        - name: ZEEBE_BROKER_GATEWAY_ENABLE
          value: "false"
        - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
          value: "io.camunda.zeebe.exporter.ElasticsearchExporter"
        - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL
          value: "http://elasticsearch-master:9200"
        - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_INDEX_PREFIX
          value: "zeebe-record"
        - name: ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT
          value: "26501"
        - name: ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT
          value: "26502"
        - name: ZEEBE_BROKER_NETWORK_MONITORINGAPI_PORT
          value: "9600"
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: JAVA_TOOL_OPTIONS
          value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
        - name: ZEEBE_BROKER_DATA_SNAPSHOTPERIOD
          value: 5m
        - name: ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK
          value: "0.85"
        - name: ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK
          value: "0.87"
        ports:
        - containerPort: 9600
          name: http
        - containerPort: 26501
          name: command
        - containerPort: 26502
          name: internal
        readinessProbe:
          httpGet:
            path: /ready
            scheme: HTTP
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 960m
            memory: 1920Mi
          requests:
            cpu: 800m
            memory: 1200Mi
        volumeMounts:
        - name: config
          mountPath: /usr/local/bin/startup.sh
          subPath: startup.sh
        - name: data
          mountPath: /usr/local/zeebe/data
        - name: exporters
          mountPath: /exporters
      volumes:
        - name: config
          configMap:
            name: camunda-platform-zeebe
            defaultMode: 365
        - name: exporters
          emptyDir: {}
      securityContext:
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - zeebe-broker
            topologyKey: kubernetes.io/hostname
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: 
      resources:
        requests:
          storage: "32Gi"
---
# Source: camunda-platform/charts/elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-platform-nsjiq-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
  - name: "camunda-platform-pqfwa-test"
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.10"
    imagePullPolicy: "IfNotPresent"
    command:
      - "sh"
      - "-c"
      - |
        #!/usr/bin/env bash -e
        curl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
  restartPolicy: Never
---
# Source: camunda-platform/charts/identity/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-platform-identity-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: identity
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-platform-identity:80']
  restartPolicy: Never
---
# Source: camunda-platform/charts/operate/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-platform-operate-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: operate
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-platform-operate:80']
  restartPolicy: Never
---
# Source: camunda-platform/charts/optimize/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-platform-optimize-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.2.13
    app.kubernetes.io/version: "3.10.5"
    app.kubernetes.io/component: optimize
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-platform-optimize:80']
  restartPolicy: Never
---
# Source: camunda-platform/charts/tasklist/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-platform-tasklist-test-connection"
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: tasklist
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-platform-tasklist:80']
  restartPolicy: Never
---
# Source: camunda-platform/charts/zeebe/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "camunda-platform-zeebe-test-connection"
  labels: 
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: camunda-platform
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.2.13
    app.kubernetes.io/version: "8.2.13"
    app.kubernetes.io/component: zeebe-broker
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['camunda-platform-zeebe:9600']
  restartPolicy: Never
